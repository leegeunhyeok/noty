type Query {
  currentUser: User!,
  userNote(userId: String!): [Note!],
  userTag(userId: String!): [Tag!],
  userTodo(userId: String!): [Todo!]
}

type Mutation {
  checkUserIdExist(userId: String!): Boolean,
  register(
    userId: String!,
    name: String!,
    email: String!,
    password: String!
  ): User!
  login(userId: String!, password: String!): LoginResponse!
}

#========== Other ==========#
scalar DateTime

enum Grade {
  DEFAULT_USER
  PREMIUM_USER
}

#========== User ==========#
type User {
  id: ID!
  userId: String!,
  name: String!
  email: String!
  password: String!
  grade: Grade!
  createdAt: DateTime!
  updatedAt: DateTime
  notes: [Note!]!
  tags: [Tag!]!
  todos: [Todo!]!
}

type LoginResponse {
  token: String!
  user: User!
}


#========== Note ==========#
type Note {
  id: ID!
  user: User!
  title: String!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime
}


#========== Tag ==========#
type Tag {
  id: ID!
  user: User!
  name: String!
  color: String!
  createdAt: DateTime!
  updatedAt: DateTime
  todos: [Todo!]!
}


#========== Todo ==========#
type Todo {
  id: ID!
  user: User!
  tag: Tag!
  index: Int!
  done: Boolean!
  content: String!
  createdAt: DateTime!
  updatedAt: DateTime
}
